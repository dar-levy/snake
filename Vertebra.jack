// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

class Vertebra {

   field int x, y;
   field int size;
   field Array conditions;
   field int currentDirection;
   field int lastConditionIndex;
   field int currentConditionIndex;

   constructor Vertebra new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      let currentDirection = 4;
      let lastConditionIndex = 0;
      let conditions = function Array new(50)
      let currentConditionIndex = 0;
      do draw();
      return this;
   }

   method void move(DirectionCondition condition) {
      conditions[lastConditionIndex + 1] = condition;
      lastConditionIndex = lastConditionIndex + 1;
      if((x=conditions[currentConditionIndex].x) & (y=conditions[currentConditionIndex].y)){
         moveByDirection(conditions[currentConditionIndex].direction);
         currentDirection = conditions[currentConditionIndex].direction;
      }

      if(~(x=conditions[currentConditionIndex].x) & (y=conditions[currentConditionIndex].y)){
         moveByDirection(currentDirection)
      }
      
      currentConditionIndex = currentConditionIndex + 1
      return;
   }

   method void moveByDirection(int direction) {
         if (direction = 1) { do moveUp(); }
         if (direction = 2) { do moveDown(); }
         if (direction = 3) { do moveLeft(); }
         if (direction = 4) { do moveRight(); }
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   method void incSize() {
      if (((y + size) < 254) & ((x + size) < 510)) {
         do erase();
         let size = size + 2;
         do draw();
      }
      return;
   }

   method void decSize() {
      if (size > 2) {
         do erase();
         let size = size - 2;
         do draw();
      }
      return;
   }

   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
      }
      return;
   }

   method void moveDown() {
      if ((y + size) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
      return;
   }

   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }

   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
}
