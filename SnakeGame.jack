
class SnakeGame {
   field Snake snake;
   field Array fruits;
   field int fruitsSize;
   field int currentFruitIndex;
   field int currentDirection;
   field int moveGap;

   constructor SnakeGame new() {
      let moveGap = 10;
      let fruitsSize = 5;
      let snake = Snake.new();
      let currentDirection = 4;
      let currentFruitIndex = 0;
      do constructFruits();

      return this;
   }

   method void constructFruits() {
      let fruits = Array.new(fruitsSize);
      let fruits[0] = Fruit.new(50,50);
      let fruits[1] = Fruit.new(30,30);
      let fruits[2] = Fruit.new(70,70);
      let fruits[3] = Fruit.new(100,100);
      let fruits[4] = Fruit.new(170,170);

      return;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      var int currentFrIndex;
      let currentFrIndex = 0;
      while(currentFrIndex < fruitsSize) {
         do fruits[currentFrIndex].dispose();
         let currentFrIndex = currentFrIndex + 1;
      }

      do Memory.deAlloc(this);
      return;
   }

   method boolean isNextMoveNotValid() {
      var Vertebra snakeHead;
      let snakeHead = snake.vertebras[snake.headIndex];
      if (snakeHead.currentDirection = 1) { if (snakeHead.y + moveGap < 510) { return false; } }
      if (snakeHead.currentDirection = 2) { if (snakeHead.y - moveGap < 510) { return false; } }
      if (snakeHead.currentDirection = 3) { if (snakeHead.x - moveGap < 254) { return false; } }
      if (snakeHead.currentDirection = 4) { if (snakeHead.x + moveGap < 254) { return false; } }
      
      return true;
   }

   method boolean isNextMoveFruit() {
      let snakeHead = snake.vertebras[snake.headIndex];
      let fruit = fruits[currentFruitIndex];
      if(snakeHead.currentDirection = 1) { if ((snakeHead.x = fruit.x) & (snake.y + moveGap = fruit.y)) { return true; } }
      if(snakeHead.currentDirection = 2) { if ((snakeHead.x = fruit.x) & (snake.y - moveGap = fruit.y)) { return true; } }
      if(snakeHead.currentDirection = 3) { if ((snakeHead.x - moveGap = fruit.x) & (snake.y = fruit.y)) { return true; } }
      if(snakeHead.currentDirection = 4) { if ((snakeHead.x + moveGap = fruit.x) & (snake.y = fruit.y)) { return true; } }
      
      return false;
   }

   method void moveToDirection(int Adirection) {
      let snakeHead = snake.vertebras[snake.headIndex];
      let currentDirection = Adirection;
      let conditionMoveTo = DirectionCondition.new(snakeHead.x, snakeHead.y, currentDirection);
      do snake.move(conditionMoveTo);
      
      return;
   }

   method void eatFruit() {
      do snake.eat(fruits[currentFruitIndex]);
      do fruits[currentFruitIndex].erase();
      if (currentFruitIndex < fruitSize) { let currentFruitIndex = currentFruitIndex + 1; }
      if (~(currentFruitIndex < fruitSize)) { let currentFruitIndex = 0; }
      do fruits[currentFruitIndex].draw();

      return;
   }

   method void determineGameStatus(boolean AisLoose, boolean Aexit) {
      let isFruit = isNextMoveFruit();
      let condition = DirectionCondition.new(-1, -1, -1);
      if ((~isFruit) & (~exit) & (~isLoose)) { do snake.move(condition);}
      if (isFruit) { do eatFruit(); }
      if (AisLoose) { 
         do Output.moveCursor(127,225);
         do Output.printString("GameOver");
      }
      if (Aexit) {
         do Output.moveCursor(127,225);
         do Output.printString("See you next time");
      }
      
      return;
   }

   method void run() {
      var char key;
      var boolean exit;
      var boolean isLoose;
      let exit = false;
      let isLoose = false;
      
      while ((~exit) & (~isLoose)) {
         while (key = 0) {
            let key = Keyboard.keyPressed();
            let isLoose = isNextMoveNotValid();
            do determineGameStatus(isLoose, exit);
         }

         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { do moveToDirection(1); } // up arrow
         if (key = 133) { do moveToDirection(2); } // down arrow
         if (key = 130) { do moveToDirection(3); } // left arrow
         if (key = 132) { do moveToDirection(4); } // right arrow

         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            let isLoose = isNextMoveNotValid();
            do determineGameStatus(isLoose, exit);
         }
     }

     return;
   }
}