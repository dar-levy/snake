
class SnakeGame {
   field Snake snake;
   field Array fruits;
   field int fruitsSize;
   field int currentFruitIndex;
   field int moveGap;

   constructor SnakeGame new() {
      let moveGap = 2;
      let fruitsSize = 5;
      let snake = Snake.new();
      let currentFruitIndex = 0;
      do constructFruits();

      return this;
   }

   method void constructFruits() {
      var Fruit firstFruit;
      let fruits = Array.new(fruitsSize);
      let fruits[0] = Fruit.new(20,4);
      let fruits[1] = Fruit.new(30,30);
      let fruits[2] = Fruit.new(400,70);
      let fruits[3] = Fruit.new(100,100);
      let fruits[4] = Fruit.new(170,170);
      let firstFruit = fruits[0];
      do firstFruit.draw();

      return;
   }

   method void dispose() {
      var int currentFrIndex;
      var Vertebra currentFr;
      do snake.dispose();
      let currentFrIndex = 0;
      while(currentFrIndex < fruitsSize) {
         let currentFr = fruits[currentFrIndex];
         do currentFr.dispose();
         let currentFrIndex = currentFrIndex + 1;
      }

      do Memory.deAlloc(this);
      return;
   }

   method boolean isNextMoveNotValid() {
      var Vertebra snakeHead;
      let snakeHead = snake.getHead();
      if (snakeHead.getCurrentDirection() = 1) { if (snakeHead.getY() - moveGap < 0) { return true; } }
      if (snakeHead.getCurrentDirection() = 2) { if (snakeHead.getY() + moveGap > 244) { return true; } }
      if (snakeHead.getCurrentDirection() = 3) { if (snakeHead.getX() - moveGap < 0) { return true; } }
      if (snakeHead.getCurrentDirection() = 4) { if (snakeHead.getX() + moveGap > 500) { return true; } }
      
      return false;
   }

   method boolean isNextMoveFruit() {
      var Vertebra snakeHead;
      var Fruit fruit;
      let snakeHead = snake.getHead();
      let fruit = fruits[currentFruitIndex];
      if(snakeHead.getCurrentDirection() = 1) { if ((snakeHead.getX() = fruit.getX()) & (snakeHead.getY() - moveGap = fruit.getY())) { return true; } }
      if(snakeHead.getCurrentDirection() = 2) { if ((snakeHead.getX() = fruit.getX()) & (snakeHead.getY() + moveGap = fruit.getY())) { return true; } }
      if(snakeHead.getCurrentDirection() = 3) { if ((snakeHead.getX() - moveGap = fruit.getX()) & (snakeHead.getY() = fruit.getY())) { return true; } }
      if(snakeHead.getCurrentDirection() = 4) { if ((snakeHead.getX() + moveGap = fruit.getX()) & (snakeHead.getY() = fruit.getY())) { return true; } }


      return false;
   }

   method void moveToDirection(int Adirection) {
      var Vertebra snakeHead;
      var DirectionCondition conditionMoveTo;
      let snakeHead = snake.getHead();
      let conditionMoveTo = DirectionCondition.new(snakeHead.getX(), snakeHead.getY(), Adirection);
      do snake.move(conditionMoveTo);
      
      return;
   }

   method void eatFruit() {
      var Fruit currentFruit;
      let currentFruit = fruits[currentFruitIndex];
      do snake.eat(currentFruit);
      do currentFruit.erase();
      if (currentFruitIndex < fruitsSize) { let currentFruitIndex = currentFruitIndex + 1; }
      if (~(currentFruitIndex < fruitsSize)) { let currentFruitIndex = 0; }
      let currentFruit = fruits[currentFruitIndex];
      do currentFruit.draw();

      return;
   }

   method void determineGameStatus(boolean AisLoose, boolean Aexit) {
      var boolean isFruit;
      var DirectionCondition condition;
      let isFruit = isNextMoveFruit();
      let condition = DirectionCondition.new(-1, -1, -1);
      if (isFruit) { do eatFruit(); return; }
      if (AisLoose) { do Output.printString("GameOver"); return; }
      if (Aexit) { do Output.printString("See you next time"); return; }
      do snake.move(condition);
      return;
   }

   method void run() {
      var char key;
      var boolean exit;
      var boolean isLoose;
      let exit = false;
      let isLoose = false;
      
      while ((~exit) & (~isLoose)) {
         while ((key = 0) & (~isLoose)) {
            let key = Keyboard.keyPressed();
            let isLoose = isNextMoveNotValid();
            do determineGameStatus(isLoose, exit);
         }

         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { do moveToDirection(1); } // up arrow
         if (key = 133) {do moveToDirection(2); } // down arrow
         if (key = 130) { do moveToDirection(3); } // left arrow
         if (key = 132) { do moveToDirection(4); } // right arrow

         while (~(key = 0) & (~isLoose)) {
            let key = Keyboard.keyPressed();
            let isLoose = isNextMoveNotValid();
            do determineGameStatus(isLoose, exit);
         }
     }

     return;
   }
}