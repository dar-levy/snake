class Snake {
    field Array Vertebras;
    field int HeadIndex;

    constructor Snake new(int Ax, int Ay, int Asize) {
        let Vertebras = function Array new(50);
        Vertebras[0] = Vertebra.new(0, 0, 10);
        do Vertebras[0].draw();
        return this;
    }
    
    method void move(DirectionCondition condition) {
        currentIndex = HeadIndex;
        while(~(currentIndex < 0)) {
            Vertebras[currentIndex].move(condition);
            currentIndex = currentIndex - 1;
        }
    }

    // TODO: Eating shall happen only if the next move of head will be the fruit (direction is right & following coordinates are of the fruit)
    method void eat() {
        let Head = Vertebras[HeadIndex];
        HeadIndex = HeadIndex + 1;
        Vertebras[HeadIndex] = Head; //Vertebra.new(HeadIndex.x, HeadIndex.y, HeadIndex.currentDirection, 10)
        // TODO: Don't forget to dispose fruit

        return;
    }

    method void changeDirection(Condition DirectionCondition) {
        let currentIndex = 0;
        while(~(currentIndex = HeadIndex + 1)) {
            do Vertebras[currentIndex].AddDirectionCondition(DirectionCondition);
            currentIndex = currentIndex + 1;
        }

        return;
    }

    method void dispose() {
        let currentIndex = HeadIndex;
        while(~(currentIndex = -1)) {
            Vertebras[currentIndex].dispose();
            currentIndex = currentIndex - 1;
        }

        do Vertebras.dispose();
        do Memory.deAlloc(this);
        
        return;
    }
}